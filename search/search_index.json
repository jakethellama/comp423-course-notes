{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jake Deng's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container for Go","text":""},{"location":"tutorials/go-setup/#intro","title":"Intro","text":"<p>Hi, in this tutorial you will learn how to set up a project in Go with a VS Code Dev Container and Git.</p> <ul> <li>Primary author: Jake Deng</li> <li>Reviewer: Michael Pearce-Ros</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have:</p> <ol> <li>A Github account: Sign up at GitHub.</li> <li>Git installed: Install Git.</li> <li>Visual Studio Code: Download and install VS Code.</li> <li>Docker installed: Download and install Docker.</li> </ol>"},{"location":"tutorials/go-setup/#part-1-setting-up-the-repository","title":"Part 1: Setting up the Repository","text":""},{"location":"tutorials/go-setup/#step-1-create-a-directory-and-initialize-git","title":"Step 1. Create a Directory and Initialize Git","text":"<p>a) Open a terminal or command prompt window.</p> <p>b) Create a new directory for the project. If you didn't change directories this will be created in your home directory by default:</p> <pre><code>mkdir hello-423-go\ncd hello-423-go\n</code></pre> <p>c) Initialize a new Git repository:</p> <pre><code>git init\n</code></pre> <p>d) Create a README.md file:</p> <pre><code>echo \"# Hello 423 in Go\" &gt; README.md\ngit add .\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-a-repository-on-github","title":"Step 2. Create a Repository on GitHub","text":"<p>a) Go to the Create a New Repository page on GitHub.</p> <p>b) Fill in these 3 fields:</p> <ol> <li>Repository name: <code>hello-423-go</code></li> <li>Description: Basic Go project with Dev Containers.</li> <li>Select Public</li> </ol> <p>c) Click Create Repository.</p>"},{"location":"tutorials/go-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>a) Add the GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;username&gt;/hello-423-go.git\n</code></pre> <p>Replace <code>&lt;username&gt;</code> with your GitHub username.</p> <p>b) Use <code>git branch</code> to see your local branch name. If it is not <code>main</code>, use <code>git branch -M main</code> to rename it.</p> <p>c) Push to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-dev-container","title":"Part 2: Setting up the Dev Container","text":""},{"location":"tutorials/go-setup/#step-1-add-dev-container-configuration","title":"Step 1. Add Dev Container Configuration","text":"<p>a) In VS Code, make sure you have the Dev Containers extension by Microsoft.</p> <p>b) Open the <code>hello-423-go</code> directory. You can do this with: File &gt; Open Folder.</p> <p>c) Create a <code>.devcontainer</code> directory and create a <code>devcontainer.json</code> file within it.</p> <p>Paste the following into <code>devcontainer.json</code>:</p> <pre><code>{\n    \"name\": \"Hello 423 in Go\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\"golang.go\"]\n        }\n    }\n}\n</code></pre> <p>The <code>devcontainer.json</code> file allows you to specifically configure your development environment. Here, we are specifying the following:</p> <ul> <li><code>name</code>: The name for your dev container.</li> <li><code>image</code>: The Docker image to use, in our case it is a base image maintained by Microsoft.</li> <li><code>customizations</code>: Adds customizations to VS Code, in our case the Go extension will be installed.</li> </ul>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-dev-container","title":"Step 2. Reopen the Project in a Dev Container","text":"<p>a) Open the VS Code Command Palette and use <code>Dev Containers: Reopen in Container</code>.</p> <p>b) In the container's terminal, check the version of Go that it is using.</p> <pre><code>go version\n</code></pre>"},{"location":"tutorials/go-setup/#part-3-using-go-to-say-hello","title":"Part 3: Using Go to Say Hello","text":""},{"location":"tutorials/go-setup/#step-1-create-the-program-files","title":"Step 1. Create the Program Files","text":"<p>a) Initialize a Go module, this creates a <code>go.mod</code> file which tracks your code's dependencies:</p> <pre><code>go mod init tutorial/hello-423-go\n</code></pre> <p>b) In VS Code, create a <code>hello.go</code> file and paste the following:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-compile-and-run-the-program","title":"Step 2. Compile and Run the Program","text":"<p>a) To quickly compile and run your program:</p> <pre><code>go run hello.go\n</code></pre> <p>b) Or, compile the program into an executable:</p> <pre><code>go build\n</code></pre> <p>And run the resulting executable:</p> <pre><code>./hello-423-go\n</code></pre> <p>Comparisons to C</p> <p>Using <code>go build</code> is similar to using <code>gcc hello.c -o hello</code> as it compiles the program to create an executable that is not immediately ran, unlike <code>go run</code>.</p> <p>Congrats, you now have a basic Go project setup in a Dev Container. Be sure to commit and push your changes to your public repository.</p>"},{"location":"tutorials/go-setup/#references","title":"References","text":"<ul> <li>RD06 Tutorial</li> <li>Go Docs</li> </ul>"}]}